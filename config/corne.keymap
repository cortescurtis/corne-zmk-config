/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        modt_left: modt_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MODT_LEFT";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            retro-tap;
            hold-trigger-key-positions = <13 14 15 16>;
            hold-trigger-on-release;
        };
        modt_meta_hypr: modt_meta_hypr {
            compatible = "zmk,behavior-hold-tap";
            label = "MODT_META_HYPR";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            retro-tap;
        };
        modt_right: modt_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MODT_RIGHT";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            retro-tap;
            hold-trigger-key-positions = <19 20 21 22>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none               &kp Y                  &kp C              &kp L                &kp M      &kp K      &kp Z                &kp F               &kp U           &kp COMMA              &kp SQT  &none
&none  &modt_left LCTRL I  &modt_left LEFT_ALT S  &modt_left LGUI R  &modt_left LSHIFT T      &kp G      &kp P  &modt_right RSHFT N  &modt_right RGUI E  &modt_right RALT A  &modt_right RCTRL O  &none
&none               &kp Q                  &kp V              &kp W                &kp D      &kp J      &kp B                &kp H           &kp SLASH             &kp DOT                &kp X  &none
                                                              &none                &mo 1  &kp SPACE    &kp RET                &mo 2               &none
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp N1  &kp N2   &kp N3   &kp N4   &kp N5      &kp N6         &kp N7     &kp N8       &kp N9     &kp N0  &none
&none  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12    &kp HOME       &kp LEFT   &kp DOWN       &kp UP  &kp RIGHT  &none
&none  &kp F3  &kp F4   &kp F5   &kp F6   &kp F7     &kp END  &kp BACKSPACE  &kp PG_DN  &kp PAGE_UP    &kp DEL  &none
                         &none   &trans   &kp F1      &kp F2          &mo 3      &none
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none              &kp EXCL                &kp AT           &kp HASH       &kp DLLR  &kp PRCNT      &kp CARET   &kp AMPS  &kp LPAR  &kp RPAR  &kp ASTRK  &none
&none  &kp LS(LG(NUMBER_5))  &kp LS(LG(NUMBER_4))  &kp LS(LG(SPACE))  &kp SEMICOLON  &kp GRAVE      &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH  &none
&none             &kp LG(Z)             &kp LG(X)          &kp LG(C)      &kp COLON  &kp TILDE      &kp UNDER   &kp PLUS  &kp LBRC  &kp RBRC   &kp PIPE  &none
                                                               &none          &mo 3    &kp TAB    &kp LG(ESC)     &trans     &none
            >;
        };

        layer_3 {
            bindings = <
&none         &none  &ext_power EP_OFF  &ext_power EP_TOG  &ext_power EP_ON         &none    &kp C_FAST_FORWARD        &kp C_NEXT  &kp C_VOL_UP  &kp C_BRI_UP  &none  &none
&none  &bt BT_SEL 4       &bt BT_SEL 3       &bt BT_SEL 2      &bt BT_SEL 1  &bt BT_SEL 0                 &none  &kp C_PLAY_PAUSE  &kp C_VOL_DN  &kp C_BRI_DN  &none  &none
&none         &none              &none              &none        &bt BT_CLR         &none          &kp C_REWIND        &kp C_PREV    &kp C_MUTE         &none  &none  &none
                                                    &none            &trans        &trans                &trans            &trans         &none
            >;
        };
    };
};
